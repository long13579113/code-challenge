interface WalletBalance { // missing blockchain type
  currency: string;
  amount: number;
  //blockchain: ...;
}
interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

interface Props extends BoxProps {

}
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

    //Using blockchain Type: any in getPriority is unsafe and can cause unexpected errors.
    // type Blockchain = 'Osmosis' | 'Ethereum' | 'Arbitrum' | 'Zilliqa' | 'Neo';
	const getPriority = (blockchain: any): number => { // blockchain: any => blockchain: Blockchain
	  switch (blockchain) {
	    case 'Osmosis':
	      return 100
	    case 'Ethereum':
	      return 50
	    case 'Arbitrum':
	      return 30
	    case 'Zilliqa':
	      return 20
	    case 'Neo':
	      return 20
	    default:
	      return -99
	  }
	}

  const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
		  const balancePriority = getPriority(balance.blockchain);
		  if (lhsPriority > -99) { //I looked and didn't see the lhsPriority variable in the code, as I understand this place will replace lhsPriority with balancePriority
		     if (balance.amount <= 0) {
		       return true;
		     }
		  }
		  return false
		}).sort((lhs: WalletBalance, rhs: WalletBalance) => {
			const leftPriority = getPriority(lhs.blockchain); // getPriority function called multiple times
		  const rightPriority = getPriority(rhs.blockchain); // getPriority function called multiple times
		  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) { // lack of equal case, in this place I think we should just use another way
		    return 1;
		  }
    });
  }, [balances, prices]);
//   const sortedBalances:WalletBalance[] = useMemo(() => {
//     return balances
//       .map((balance: WalletBalance) => ({
//         ...balance,
//         priority: getPriority(balance.blockchain),
//       }))
//       .filter((balance) => balance.priority > -99 && balance.amount <= 0)
//       .sort((lhs, rhs) => rhs.priority - lhs.priority);
//   }, [balances, prices]);

  const formattedBalances = sortedBalances.map((balance: WalletBalance) => { // formattedBalances function is not used so delete or comment it out
    return {
      ...balance,
      formatted: balance.amount.toFixed()
    }
  })

  const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount; //balance.currency need to check exist
    // const price = prices[balance.currency] ?? 0;
    // const usdValue = price * balance.amount;
    return (
      <WalletRow 
        className={classes.row}
        //Using an index as a key in a list of rows can cause poor performance when the list changes over time.
        key={index} //key={index} => key={balance.currency} or key={balance.blockchain}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={balance.formatted}
      />
    )
  })

  return (
    <div {...rest}>
      {rows}
    </div>
  )
}